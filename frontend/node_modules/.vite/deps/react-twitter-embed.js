import {
  require_react
} from "./chunk-YJYY6GXC.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/scriptjs/dist/script.js
var require_script = __commonJS({
  "node_modules/scriptjs/dist/script.js"(exports, module) {
    (function(name, definition) {
      if (typeof module != "undefined" && module.exports) module.exports = definition();
      else if (typeof define == "function" && define.amd) define(definition);
      else this[name] = definition();
    })("$script", function() {
      var doc = document, head = doc.getElementsByTagName("head")[0], s = "string", f = false, push = "push", readyState = "readyState", onreadystatechange = "onreadystatechange", list = {}, ids = {}, delay = {}, scripts = {}, scriptpath, urlArgs;
      function every(ar, fn) {
        for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f;
        return 1;
      }
      function each(ar, fn) {
        every(ar, function(el) {
          fn(el);
          return 1;
        });
      }
      function $script(paths, idOrDone, optDone) {
        paths = paths[push] ? paths : [paths];
        var idOrDoneIsDone = idOrDone && idOrDone.call, done = idOrDoneIsDone ? idOrDone : optDone, id = idOrDoneIsDone ? paths.join("") : idOrDone, queue = paths.length;
        function loopFn(item) {
          return item.call ? item() : list[item];
        }
        function callback() {
          if (!--queue) {
            list[id] = 1;
            done && done();
            for (var dset in delay) {
              every(dset.split("|"), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = []);
            }
          }
        }
        setTimeout(function() {
          each(paths, function loading(path, force) {
            if (path === null) return callback();
            if (!force && !/^https?:\/\//.test(path) && scriptpath) {
              path = path.indexOf(".js") === -1 ? scriptpath + path + ".js" : scriptpath + path;
            }
            if (scripts[path]) {
              if (id) ids[id] = 1;
              return scripts[path] == 2 ? callback() : setTimeout(function() {
                loading(path, true);
              }, 0);
            }
            scripts[path] = 1;
            if (id) ids[id] = 1;
            create(path, callback);
          });
        }, 0);
        return $script;
      }
      function create(path, fn) {
        var el = doc.createElement("script"), loaded;
        el.onload = el.onerror = el[onreadystatechange] = function() {
          if (el[readyState] && !/^c|loade/.test(el[readyState]) || loaded) return;
          el.onload = el[onreadystatechange] = null;
          loaded = 1;
          scripts[path] = 2;
          fn();
        };
        el.async = 1;
        el.src = urlArgs ? path + (path.indexOf("?") === -1 ? "?" : "&") + urlArgs : path;
        head.insertBefore(el, head.lastChild);
      }
      $script.get = create;
      $script.order = function(scripts2, id, done) {
        (function callback(s2) {
          s2 = scripts2.shift();
          !scripts2.length ? $script(s2, id, done) : $script(s2, callback);
        })();
      };
      $script.path = function(p) {
        scriptpath = p;
      };
      $script.urlArgs = function(str) {
        urlArgs = str;
      };
      $script.ready = function(deps, ready, req) {
        deps = deps[push] ? deps : [deps];
        var missing = [];
        !each(deps, function(dep) {
          list[dep] || missing[push](dep);
        }) && every(deps, function(dep) {
          return list[dep];
        }) ? ready() : !function(key) {
          delay[key] = delay[key] || [];
          delay[key][push](ready);
          req && req(missing);
        }(deps.join("|"));
        return $script;
      };
      $script.done = function(idOrDone) {
        $script([null], idOrDone);
      };
      return $script;
    });
  }
});

// node_modules/react-twitter-embed/dist/index.modern.js
var import_react = __toESM(require_react());
var twitterWidgetJs = "https://platform.twitter.com/widgets.js";
var methodName = "createTimeline";
var TwitterTimelineEmbed = function TwitterTimelineEmbed2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  var buildOptions = function buildOptions2() {
    var options = Object.assign({}, props.options);
    if (props !== null && props !== void 0 && props.autoHeight) {
      var _ref$current, _ref$current$parentNo;
      options.height = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentNo = _ref$current.parentNode) === null || _ref$current$parentNo === void 0 ? void 0 : _ref$current$parentNo.offsetHeight;
    }
    options = Object.assign({}, options, {
      theme: props === null || props === void 0 ? void 0 : props.theme,
      linkColor: props === null || props === void 0 ? void 0 : props.linkColor,
      borderColor: props === null || props === void 0 ? void 0 : props.borderColor,
      lang: props === null || props === void 0 ? void 0 : props.lang,
      tweetLimit: props === null || props === void 0 ? void 0 : props.tweetLimit,
      ariaPolite: props === null || props === void 0 ? void 0 : props.ariaPolite
    });
    return options;
  };
  var buildChromeOptions = function buildChromeOptions2(options) {
    options.chrome = "";
    if (props.noHeader) {
      options.chrome = options.chrome + " noheader";
    }
    if (props.noFooter) {
      options.chrome = options.chrome + " nofooter";
    }
    if (props.noBorders) {
      options.chrome = options.chrome + " noborders";
    }
    if (props.noScrollbar) {
      options.chrome = options.chrome + " noscrollbar";
    }
    if (props.transparent) {
      options.chrome = options.chrome + " transparent";
    }
    return options;
  };
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName]) {
          console.error("Method " + methodName + " is not present anymore in twttr.widget api");
          return;
        }
        var options = buildOptions();
        options = buildChromeOptions(options);
        window.twttr.widgets[methodName]({
          sourceType: props.sourceType,
          screenName: props.screenName,
          userId: props.userId,
          ownerScreenName: props.ownerScreenName,
          slug: props.slug,
          id: props.id || props.widgetId,
          url: props.url
        }, ref === null || ref === void 0 ? void 0 : ref.current, options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$1 = "createShareButton";
var TwitterShareButton = function TwitterShareButton2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$1]) {
          console.error("Method " + methodName$1 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$1](props.url, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$2 = "createFollowButton";
var TwitterFollowButton = function TwitterFollowButton2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$2]) {
          console.error("Method " + methodName$2 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$2](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$3 = "createHashtagButton";
var TwitterHashtagButton = function TwitterHashtagButton2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$3]) {
          console.error("Method " + methodName$3 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$3](props.tag, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$4 = "createMentionButton";
var TwitterMentionButton = function TwitterMentionButton2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$4]) {
          console.error("Method " + methodName$4 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$4](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$5 = "createTweet";
var TwitterTweetEmbed = function TwitterTweetEmbed2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$5]) {
          console.error("Method " + methodName$5 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$5](props.tweetId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$6 = "createMoment";
var TwitterMomentShare = function TwitterMomentShare2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$6]) {
          console.error("Method " + methodName$6 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$6](props.momentId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$7 = "createDMButton";
var TwitterDMButton = function TwitterDMButton2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$7]) {
          console.error("Method " + methodName$7 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$7](props.id, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          if (isComponentMounted) {
            setLoading(false);
            if (props.onLoad) {
              props.onLoad(element);
            }
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$8 = "createVideo";
var TwitterVideoEmbed = function TwitterVideoEmbed2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$8]) {
          console.error("Method " + methodName$8 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$8](props.id, ref === null || ref === void 0 ? void 0 : ref.current).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
var methodName$9 = "createPeriscopeOnAirButton";
var TwitterOnAirButton = function TwitterOnAirButton2(props) {
  var ref = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState(true), loading = _React$useState[0], setLoading = _React$useState[1];
  import_react.default.useEffect(function() {
    var isComponentMounted = true;
    var script = require_script();
    script(twitterWidgetJs, "twitter-embed", function() {
      if (!window.twttr) {
        console.error("Failure to load window.twttr, aborting load");
        return;
      }
      if (isComponentMounted) {
        if (!window.twttr.widgets[methodName$9]) {
          console.error("Method " + methodName$9 + " is not present anymore in twttr.widget api");
          return;
        }
        window.twttr.widgets[methodName$9](props.username, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function(element) {
          setLoading(false);
          if (props.onLoad) {
            props.onLoad(element);
          }
        });
      }
    });
    return function() {
      isComponentMounted = false;
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, loading && import_react.default.createElement(import_react.default.Fragment, null, props.placeholder), import_react.default.createElement("div", {
    ref
  }));
};
export {
  TwitterDMButton,
  TwitterFollowButton,
  TwitterHashtagButton,
  TwitterMentionButton,
  TwitterMomentShare,
  TwitterOnAirButton,
  TwitterShareButton,
  TwitterTimelineEmbed,
  TwitterTweetEmbed,
  TwitterVideoEmbed
};
/*! Bundled license information:

scriptjs/dist/script.js:
  (*!
    * $script.js JS loader & dependency manager
    * https://github.com/ded/script.js
    * (c) Dustin Diaz 2014 | License MIT
    *)
*/
//# sourceMappingURL=react-twitter-embed.js.map
